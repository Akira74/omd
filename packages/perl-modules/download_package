#!/usr/bin/env perl

use warnings;
use strict;
use lib '/omd/versions/default/lib/perl5/lib/perl5';
use YAML;
use Data::Dumper;

####################################
# we need perlmodlib for determing core modules
`perldoc -l perlmodlib > /dev/null`;
if($? != 0) {
    print "you have to install the perl-doc package\n";
    exit 1;
}

####################################
# download modules
chdir("src");
our @downloaded;
for my $module (@ARGV) {
    print $module." is a core module\n" if is_core_module($module);
    download_module($module);
}
# print result of all downloaded files
if(scalar @downloaded > 0) {
    print "\n";
    print "please add the following tarballs to the Makefile:\n";
    print join("\n", @downloaded);
    print "\n";
} else {
    print "no new packages downloaded\n";
}

####################################
# download a module
# needs a module name like: IO::All
sub download_module {
    my $mod = shift;
    my $ver = shift || 0;

    our %already_downloaded;
    return if defined $already_downloaded{$mod.$ver};
    $already_downloaded{$mod.$ver} = 1;

    # we dont need core modules or perl dependency
    return if $mod eq 'perl';
    return if is_core_module($mod);

    my $urlpath;
    my $out=cmd("wget -O - 'http://search.cpan.org/perldoc?".$mod."'");
    if($out =~ m/href="(\/CPAN\/authors\/id\/.*?\/.*?\.tar\.gz)">/) {
        $urlpath = $1;
    }
    else {
        print "got no url:\n";
        print $out;
        exit;
    }
    return if defined $already_downloaded{$urlpath};
    my $tarball=$urlpath; $tarball =~ s/^.*\///g;
    my $modbasename=$tarball; $modbasename =~ s/\-[0-9\.]*\.tar\.gz//g;
    my @curfile = glob("$modbasename*");

    # check if we have the right version
    my $download = 1;
    for my $file (@curfile) {
        if($tarball =~ m/\-([0-9\.]*)\.tar\.gz/) {
            my $fver = $1;
            if($fver >= $ver) {
                $download = 0;
            }
        }
    }

    if( $download ) {
        cmd('wget -q "http://search.cpan.org'.$urlpath.'"');
        $already_downloaded{$urlpath} = 1;
        get_deps($tarball);
        push @downloaded, $tarball;
        print "downloaded $tarball\n";
    } else {
        print "$modbasename already downloaded\n";
        get_deps($curfile[0]);
    }
}

####################################
# get all dependencies for a tarball
# needs a filename like: Storable-2.21.tar.gz
sub get_deps {
    my $file = shift;
    our %already_checked;
    return if defined $already_checked{$file};
    $already_checked{$file} = 1;
    print " -> checking dependecies for: $file\n";
    cmd("tar zxf $file");
    my $dir = $file;
    $dir =~  s/\.tar\.gz//g;
    my $meta;
    if(-s "$dir/META.yml") {
        $meta = YAML::LoadFile("$dir/META.yml");
    }
    cmd("rm -fr $dir");
    return unless defined $meta->{requires};
    for my $dep (keys %{$meta->{requires}}) {
        next if $dep eq 'perl';
        my $depv =$meta->{requires}->{$dep};
        print "   -> $dep ($depv)\n";
        download_module($dep, $depv);
    }
}


####################################
# is this a core module?
sub is_core_module {
    my($module) = @_;
    our %_stdmod;

    unless (keys %_stdmod) {
        chomp(my $perlmodlib = cmd("perldoc -l perlmodlib"));
        open my $fh, "<", $perlmodlib
          or die "$0: open $perlmodlib: $!\n";

        while (<$fh>) {
            next unless /^=head\d\s+Pragmatic\s+Modules/ ..
                        /^=head\d\s+CPAN/;

            if (/^=item\s+(\w+(::\w+)*)/) {
                ++$_stdmod{ lc $1 };
            }
        }
    }

    exists $_stdmod{ lc $module } ? $module : ();
}

####################################
# execute a command
sub cmd {
    my $cmd = shift;
    my $out = "";
    open(my $ph, '-|', $cmd." 2>&1") or die("cannot execute cmd: $cmd");
    while(my $line = <$ph>) {
        $out .= $line;
    }
    close($ph) or die("cmd failed (rc:$?): $cmd\n$out");
    return $out;
}

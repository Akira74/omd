#!/usr/bin/python

# This program is used to manage instances (create, rm, cp, mv, update)
# There is almost no error handling implemented. Please remember: this
# is a prototype, an experiment - nothing more.

import sys, os, shutil, pwd, re, time

# FIXME: Determine this somehow
OMD_VERSION = "0.42.2"

def bail_out(message):
    sys.stderr.write(message)
    sys.exit(1)

def omd_root():
    return "/omd/versions/" + OMD_VERSION

# Read distro- and version specific values
def read_info():
    global g_info
    g_info = {}
    info_dir = omd_root() + "/share/omd"
    for f in os.listdir(info_dir):
	if f.endswith(".info"):
	    for line in file(info_dir + "/" + f):
	       var, value = line.split('=')
	       g_info[var.strip()] = value.strip()

def site_dir(sitename):
    return "/omd/sites/" + sitename

def tmp_dir(sitename):
    return "/omd/sites/%s/tmp" % sitename

# The version of a site is solely determined by the
# link ~SITE/version
def site_version(sitename):
    version_link = site_dir(sitename) + "/version"
    version = os.readlink(version_link).split("/")[-1]
    return version

def site_exists(sitename):
    return os.path.exists(site_dir(sitename))

def all_sites():
    return os.listdir("/omd/sites")

# Check if site is completely stopped
def site_is_stopped(sitename):
    return check_status(sitename, False) == 1

def site_is_running(sitename):
    return check_status(sitename, False) == 0

def useradd(sitename):
    # Create user for running site 'name'
    os.system("groupadd " + sitename)
    useradd_options = g_info["USERADD_OPTIONS"]
    os.system("useradd %s -d '%s' -c 'OMD instance %s' -g %s %s -s /bin/bash" % \
                (useradd_options, site_dir(sitename), sitename, sitename, sitename))

    # Add Apache to new group. It needs to be able to write in to the 
    # command pipe and possible other stuff
    os.system("gpasswd -a %s %s >/dev/null" % (g_info["APACHE_USER"], sitename))

def userdel(name):
    os.system("userdel -r " + name + " 2>/dev/null")
    # FIXME: On some OSes (Debian) the group is automatically removed if
    # it bears the same name as the user
    os.system("groupdel " + name + " 2>/dev/null")

def switch_to_site_user():
    p = pwd.getpwnam(g_sitename)
    uid = p.pw_uid
    gid = p.pw_gid
    os.chdir(p.pw_dir)
    os.setgid(gid)
    os.setuid(uid)

def tmpfs_mounted(sitename):
    # Problem here: if /omd is a symbolic link somewhere else,
    # then in /proc/mounts the physical path will appear and be
    # different from tmp_path. We just check the suffix therefore.
    path_suffix = "sites/%s/tmp" % sitename
    for line in file("/proc/mounts"):
        device, mp, fstype, options, dump, fsck = line.split()
        if mp.endswith(path_suffix) and fstype == 'tmpfs':
            return True
    return False

def create_tmpfs(sitename):
    if tmpfs_mounted(sitename):
        return
    if os.getuid() == 0:
        switch_to_site_user()

    tmp = tmp_dir(sitename)
    sys.stdout.write("Creating temporary filesystem...")
    sys.stdout.flush()
    if not os.path.exists(tmp):
        os.mkdir(tmp)
    if 0 != os.system("mount '%s'" % tmp):
        sys.stdout.write("ERROR\n")
        return
    create_skeleton_files(sitename, "tmp")
    chown_tree(tmp, sitename)
    sys.stdout.write("OK\n")

def unmount_tmpfs(sitename):
    if tmpfs_mounted(sitename):
        sys.stdout.write("Unmounting temporary filesystem...")
	for t in range(0, 10):
	    if 0 == os.system("umount '%s'" % tmp_dir(sitename)):
	        sys.stdout.write("OK\n")
		return
	    sys.stdout.write(".")
	    sys.stdout.flush()
	    time.sleep(1)
        bail_out("Cannot unmount tmp filesystem.\n")

def add_to_fstab(sitename):
    # tmpfs                   /opt/omd/sites/b01/tmp  tmpfs   user,uid=b01,gid=b01 0 0
    mountpoint = tmp_dir(sitename)
    sys.stdout.write("Adding %s to /etc/fstab.\n" % mountpoint)
    file("/etc/fstab", "a+").write("tmpfs  %s tmpfs noauto,user,mode=755,uid=%s,gid=%s 0 0\n" % \
        (mountpoint, sitename, sitename))

def remove_from_fstab(sitename):
    mountpoint = tmp_dir(sitename)
    sys.stdout.write("Removing %s from /etc/fstab.\n" % mountpoint)
    newtab = file("/etc/fstab.new", "w")
    for line in file("/etc/fstab"):
        if "uid=%s," % sitename in line and mountpoint in line:
            continue
        newtab.write(line)
    os.rename("/etc/fstab.new", "/etc/fstab")

def start_site(sitename):
    create_tmpfs(sitename)
    call_init_scripts(sitename, "start")

def create_skeleton_files(sitename, dir):
    # Hack: exclude tmp if dir is '.'
    exclude_tmp = dir == '.'
    sitedir = site_dir(sitename)
    replacements = {
        "###SITE###" : sitename,
        "###ROOT###" : sitedir,
    }
    skelroot = "/omd/versions/%s/skel" % OMD_VERSION
    os.chdir(skelroot)  # make relative paths
    for dirpath, dirnames, filenames in os.walk(dir): 
        if dirpath.startswith("./"):
            dirpath = dirpath[2:]
        targetdir = sitedir + "/" + dirpath
        if exclude_tmp and targetdir.startswith(tmp_dir(sitename)):
            continue
        if not os.path.exists(targetdir):
            os.mkdir(targetdir)
        for d in dirnames:
            td = targetdir + "/" + d
            # Create directories with same mode as in skel
            if not os.path.exists(td):
                os.mkdir(td)
                mode = os.stat(dirpath + "/" + d).st_mode & 0xfff
                os.chmod(td, mode)
                
        for fn in filenames:
            src = dirpath + "/" + fn
            dst = targetdir + "/" + fn
            if os.path.islink(src):
                os.symlink(os.readlink(src), dst)
            else:
                create_template_instance(src, dst, replacements, sitename)

def create_apache_hook(sitename):
    file("/omd/apache/%s.conf" % sitename, "w").write("Include %s/etc/apache/*.conf\n" % site_dir(sitename))

def delete_apache_hook(sitename):
    os.remove("/omd/apache/%s.conf" % sitename)

def reload_apache():
    # FIXME: This is OS specific
    sys.stdout.write("Reloading Apache...")
    sys.stdout.flush()
    os.system("%s restart" % g_info["APACHE_CTL"])
    sys.stdout.write("OK\n")

def create_template_instance(src, dst, replacements, sitename):
    file(dst, "w").write(replace_tags(file(src).read(), replacements))
    mode = os.stat(src).st_mode & 0xfff
    os.chmod(dst, mode)

def replace_tags(content, replacements):
    for var, value in replacements.items():
        content = content.replace(var, value)
    return content

def stop_if_not_stopped(sitename):
    if not site_is_stopped(sitename):
        stop_site(sitename)

def stop_site(sitename):
    call_init_scripts(sitename, "stop")


# Change site specific information in files originally create from
# skeleton files. Skip files below tmp/
def patch_skeleton_files(old, new):
    skelroot = "/omd/versions/%s/skel" % OMD_VERSION
    os.chdir(skelroot)  # make relative paths
    for dirpath, dirnames, filenames in os.walk("."): 
        if dirpath.startswith("./"): 
            dirpath = dirpath[2:]
        targetdir = site_dir(new) + "/" + dirpath
        if targetdir.startswith(tmp_dir(new)):
            continue # Skip files below tmp
        for fn in filenames:
            src = dirpath + "/" + fn
            dst = targetdir + "/" + fn
            if os.path.isfile(src) and not os.path.islink(src): # links are also files??.
                patch_template_file(src, dst, old, new)


def chown_tree(dir, user):
    uid = pwd.getpwnam(user).pw_uid
    gid = pwd.getpwnam(user).pw_gid
    os.chown(dir, uid, gid)
    for dirpath, dirnames, filenames in os.walk(dir): 
        for entry in dirnames + filenames:
            os.lchown(dirpath + "/" + entry, uid, gid)


def patch_template_file(src, dst, old, new):
    # Create patch from old instanciated skeleton file to new one
    content = file(src).read()
    for site in [ old, new ]:
        replacements = {
            "###SITE###" : site,
            "###ROOT###" : site_dir(site),
        }
        file("%s.skel.%s" % (dst, site), "w").write(replace_tags(content, replacements))

    # Now create patch from old to new and immediately apply on 
    # existing - possibly user modified - file.
    if 0 == os.system("diff -u %s.skel.%s %s.skel.%s | patch --force --backup --forward --silent %s" % 
            (dst, old, dst, new, dst)):
        # remove unnecessary files
        try:
            os.remove(dst + ".skel." + old)
            os.remove(dst + ".skel." + new)
            os.remove(dst + ".orig")
        except:
            pass
    else:
        sys.stdout.write("%s: Cannot update due to your changes. Please check.\n" % dst)

def init_scripts(sitename):
    rc_dir = "/omd/sites/%s/etc/rc.d" % sitename
    scripts = os.listdir(rc_dir)
    scripts.sort()
    return rc_dir, scripts

def call_init_scripts(sitename, command):
    # Call stop scripts in reverse order
    rc_dir, scripts = init_scripts(sitename)
    if command == "stop":
        scripts.reverse()
    ok = True
    for script in scripts:
        if 0 != os.system("%s/%s %s" % (rc_dir, script, command)):
            ok = False
    if ok:
         return 0
    else:
         return 2

def check_status(sitename, display=True):
    if display:
        sys.stdout.write("%s: " % sitename)
        sys.stdout.flush()
    num_running = 0
    num_unused = 0
    rc_dir, scripts = init_scripts(sitename)
    for script in scripts:
        komponent = script.split("/")[-1].split('-')[-1]
        if display:
            sys.stdout.write(" %s:" % komponent)
        state = os.system("%s/%s status >/dev/null 2>&1" % (rc_dir, script)) >> 8
        if state == 0:
            if display:
                sys.stdout.write("running")
            num_running += 1
        elif state == 5:
            if display:
                sys.stdout.write("unused")
            num_unused += 1
        else:
            if display:
                sys.stdout.write("stopped")
    if display:
        sys.stdout.write("\n")

    if num_running == 0:
        return 1 # completely stopped
    elif num_running + num_unused == len(scripts):
        return 0 # all running
    else:
        return 2 # partially running


def config_load():
    confpath = g_sitedir + "/etc/omd/site.conf"
    if not os.path.exists(confpath):
        return

    for line in file(confpath):
	line = line.strip()
	if line == "" or line[0] == "#": 
	    continue
	var, value = line.split("=", 1)
	value = value.strip('"').strip("'")
	var = var.strip()
        if not var.startswith("CONFIG_"):
            sys.stderr.write("Ignoring invalid variable %s.\n" % var)
        else:
            var = var[7:]
            if not var in g_hooks:
                sys.stderr.write("Ignoring undefined variable %s.\n" % var)
            else:
                g_hooks[var]["value"] = value

def config_save():
    confdir = g_sitedir + "/etc/omd"
    if not os.path.exists(confdir):
        os.mkdir(confdir)
    f = file(g_sitedir + "/etc/omd/site.conf", "w")
    hooknames = g_hooks.keys()
    hooknames.sort()
    for hookname in hooknames:
        hook = g_hooks[hookname]
	f.write("CONFIG_%s='%s'\n" % (hookname, hook["value"]))

# Get information about all hooks
def config_load_hooks():
    global g_hooks
    g_hooks = {}
    hook_dir = g_sitedir + "/lib/omd/hooks"
    for hookname in os.listdir(hook_dir):
	if hookname[0] != '.':
	     g_hooks[hookname] = config_load_hook(hookname)
    # now load actual values from site.conf, if available
    config_load()

def call_hook(hookname, args):
    hook_file = g_sitedir + "/lib/omd/hooks/" + hookname
    argsstring = " ".join([ "'%s'" % arg for arg in args ])
    os.putenv("OMD_ROOT", g_sitedir)
    os.putenv("OMD_SITE", g_sitename)
    return os.popen(hook_file + " " + argsstring).read().strip()

def config_load_hook(hookname): 

    def get_hook_info(info):
	return call_hook(hookname, [info])

    hook = {}
    hook["alias"] = get_hook_info("alias")
    hook["description"] = get_hook_info("alias")
    hook["default"] = get_hook_info("default")
    hook["value"] = hook["default"]
    # The choices can either be a list of possible keys. Then
    # the hook outputs one live for each choice where the key and a
    # description are separated by a colon. Or it outputs one line
    # where that line is an extended regular expression matching the
    # possible values.
    choicestxt = get_hook_info("choices").split("\n")
    if len(choicestxt) == 1:
        choices = re.compile(choicestxt[0] + "$")
    else:
        choices = []
        try:
            for line in choicestxt:
                val, descr = line.split(":", 1)
                val = val.strip()
                descr = descr.strip()
                choices.append( (val, descr) )
        except:
            sys.stderr.write("Invalid output of hook: %s\n" % choicestxt)
            sys.exit(1)
            
    hook["choices"] = choices
    return hook


def config_set(args):
    if len(args) != 2:
	sys.stderr.write("Please specify variable name and value\n")
	config_usage()
	return

    if not site_is_stopped(g_sitename):
        sys.stderr.write("Cannot change config variables while site is running.\n")
        return

    hookname = args[0]
    value = args[1]
    hook = g_hooks.get(hookname)
    if not hook:
	sys.stderr.write("No such variable '%s'\n" % hookname)
	return

    # Check if value is valid. Choices are either a list of allowed
    # keys or a regular expression
    if type(hook["choices"]) == list:
        choices = [ var for (var, descr) in hook["choices"] ]
        if value not in choices:
            sys.stderr.write("Invalid value for '%s'. Allowed are: %s\n" % \
                    (value, ", ".join(choices)))
            return
    else:
        if not hook["choices"].match(value):
            sys.stderr.write("Invalid value for '%s'. Does not match allowed pattern.\n" % value)
            return

    config_set_value(hookname, value)

def config_set_all():
    for hookname, hook in g_hooks.items():
        config_set_value(hookname, hook["value"])

def config_set_value(hookname, value):
    hook = g_hooks.get(hookname)
    hook["value"] = value
    config_save()
    os.system("%s/lib/omd/hooks/%s set '%s'" % (g_sitedir, hookname, value))

def config_usage():
    sys.stdout.write("""Usage of config command:

omd config show          - show current settings of all configuration variables
omd config show VAR      - show current setting of variable VAR
omd config set VAR VALUE - set VAR to VALUE
omd config choices VAR   - show allowed values for VAR
""")

def config_show(args):
    if len(args) == 0:
	hooknames = g_hooks.keys()
	hooknames.sort()
	for hookname in hooknames:
	    sys.stdout.write("%s: %s\n" % (hookname, g_hooks[hookname]["value"]))
    else:
        output = []
        for hookname in args:
            hook = g_hooks.get(hookname)
            if not hook:
                sys.stderr.write("No such variable %s\n" % hookname)
            else:
                output.append(hook["value"])
	sys.stdout.write(" ".join(output))
	sys.stdout.write("\n")


def init_action(command):
    if command == "start":
        create_tmpfs(g_sitename)
    if command == "status":
        return check_status(g_sitename)
    else:
        return call_init_scripts(g_sitename, command)

# ----------------------------------------------------------
#                                                  _     
#     ___ ___  _ __ ___  _ __ ___   __ _ _ __   __| |___ 
#    / __/ _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` / __|
#   | (_| (_) | | | | | | | | | | | (_| | | | | (_| \__ \
#    \___\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|___/
#                                                        
# ----------------------------------------------------------
def main_help(args=[]):
    am_root = os.getuid() == 0
    if am_root:
        sys.stdout.write("Usage (called as root):\n\n")
    else:
        sys.stdout.write("Usage (called as site user):\n\n")

    for command, only_root, needs_site, site_must_exist, confirm, synopsis, command_function, descr, confirm_text in commands:
        if only_root and not am_root:
            continue
        if am_root:
            if needs_site == 2:
                synopsis = "[SITE] " + synopsis
            elif needs_site == 1:
                synopsis = "SITE " + synopsis

        sys.stdout.write(" omd %-10s %-16s %s\n" % (command, synopsis, descr))

def main_setup(args):
    packages = g_info["OS_PACKAGES"].split()
    install_cmd = g_info["PACKAGE_INSTALL"]
    command = "%s %s" % (install_cmd, " ".join(packages))
    sys.stdout.write("Going to execute '%s'\n" % command)
    if 0 == os.system(command):
       sys.stdout.write("OK.\n")


def main_uninstall(args):
    global g_sitename
    global g_sitedir
    for sitename in all_sites():
	g_sitename = sitename
        g_sitedir = site_dir(g_sitename)
	main_rm([])

    for path in [ g_info["OMD_PHYSICAL_BASE"], 
		  "/omd", 
		  g_info["APACHE_CONF_DIR"] + "/omd.conf",
		  "/etc/init.d/omd",
		  "/usr/bin/omd" ]:
	os.system("rm -rf '%s'" % path)

    sys.stdout.write("Good bye.\n")


def main_version(args):
    sys.stdout.write("OMD - OpenSource Monitoring Distribution Version %s\n" % g_info["OMD_VERSION"])

def main_versions(args):
    for version in os.listdir("/omd/versions"):
	if version != "default":
	    sys.stdout.write("%s\n" % version)

def main_sites(args):
    for site in os.listdir("/omd/sites"):
	sys.stdout.write("%s\n" % site)

def main_create(args):
    if site_exists(g_sitename):
        bail_out("Site '%s' already existing.\n" % g_sitename)

    # Create operating system user for site
    useradd(g_sitename)

    sitedir = site_dir(g_sitename)
    os.makedirs(sitedir)
    os.system("chown %s:%s '%s'" % (g_sitename, g_sitename, sitedir))
    add_to_fstab(g_sitename)

    # Create symbolic link to version
    os.symlink("../../versions/%s" % OMD_VERSION, sitedir + "/version")

    # Build up directory structure with symbolic links relative to
    # the version link we just create
    for d in [ 'bin', 'include', 'lib', 'share' ]:
        os.symlink("version/" + d, sitedir + "/" + d)

    create_skeleton_files(g_sitename, '.')

    # Create site.conf with default values
    config_load_hooks()
    config_set_all() # execute 'set' functions with default values
    config_save()

    # Change ownership of all files and dirs to site user
    os.system("chown -R %s:%s '%s'" % (g_sitename, g_sitename, sitedir))

    # Create include-hook for Apache and reload apache
    create_apache_hook(g_sitename)
    sys.stdout.write("Created new site %s with version %s.\n" % (g_sitename, OMD_VERSION))
    reload_apache()

    # Mount and create contents of tmpfs. This must be done as normal
    # user. We also could do this at 'omd start', but this might confuse
    # users. They could create files below tmp which would be shadowed
    # by the mount.
    create_tmpfs(g_sitename)    


def main_rm(args):
    stop_if_not_stopped(g_sitename)
    unmount_tmpfs(g_sitename)
    remove_from_fstab(g_sitename)
    sys.stdout.write("Removing site %s..." % g_sitename)
    sys.stdout.flush()
    userdel(g_sitename)
    if os.path.exists(g_sitedir): # should be done by userdel
        shutil.rmtree(site_dir(g_sitename))
    sys.stdout.write("OK\n")

    # remove include-hook for Apache and tell apache
    delete_apache_hook(g_sitename)
    reload_apache()

def main_mv(args):
    if len(args) != 1:
	bail_out("omd: Usage: omd mv oldname newname\n")
    new = args[0]
    
    if site_exists(new):
        bail_out("Site %s already existing.\n" % new)

    old = g_sitename
    if site_is_running(old):
	bail_out("Cannot rename site '%s' while it is running.\n" % old)

    unmount_tmpfs(old)
    remove_from_fstab(old)
    sys.stdout.write("Renaming site %s to %s..." % (old, new))
    sys.stdout.flush()

    # Rename base directory and apache config
    os.rename(site_dir(old), site_dir(new))
    delete_apache_hook(old)
    create_apache_hook(new)

    # Now reflect name change in configuration files which have been
    # create from skeletons. We are only interested in plain files,
    # directories and symlinks won't change.
    patch_skeleton_files(old, new)

    # Create new user and own over all files to him. Then delete old user
    useradd(new)
    chown_tree(site_dir(new), new)
    userdel(old)

    sys.stdout.write("OK\n")
    add_to_fstab(new)

    # Tell Apache about changes
    reload_apache()

def main_cp(args):
    if len(args) != 1:
	bail_out("omd: Usage: omd cp oldname newname\n")
    new = args[0]
    
    if site_exists(new):
        bail_out("Site %s already existing.\n" % new)

    old = g_sitename
    if site_is_running(old):
	bail_out("Cannot copy while site '%s' is still running.\n" % old)

    sys.stdout.write("Creating new site %s as a copy of %s..." % (new, g_sitename))
    sys.stdout.flush()
    # First make exact file-per-file copy with same
    # user but already new name
    os.mkdir(site_dir(new))
    os.system("tar cf - -C '%s' --exclude tmp . | tar xf - -C '%s'" % \
            (site_dir(g_sitename), site_dir(new)))

    # Change config files from old to new site (see rename_site())
    patch_skeleton_files(g_sitename, new)

    # Create new user and own over all files to him.
    useradd(new)
    chown_tree(site_dir(new), new)
    sys.stdout.write("OK\n")

    # Entry for tmps in /etc/fstab
    add_to_fstab(new)

    # Apache hook, reload apache
    create_apache_hook(new)
    reload_apache()

def main_update(args):
    bail_out("Sorry. Not yet implemented.\n")

def main_init_action(command, args):
    global g_sitename
    # if no site is selected, all sites are affected
    if not g_sitename:
        exit_status = 0
	for site in all_sites():
            # We need to do an os.system(), because each
            # site must be started with the account of the
            # site user. And after setuid() we cannot return.
            sys.stdout.write("Doing '%s' on site %s:\n" % (command, site))
            exit_status = max(exit_status, os.system("%s %s %s %s" % (sys.argv[0], command, site, " ".join(args))))
    else:
	exit_status = init_action(command)
    sys.exit(exit_status)

def main_config(args):
    config_load_hooks()
    if len(args) == 0:
	args = [ "show" ]
    command = args[0]
    args = args[1:]
    if command == "show":
	config_show(args)
    elif command == "set":
	config_set(args)
    else:
	config_usage()


# ----------------------------------------------------------
#                                _       
#                _ __ ___   __ _(_)_ __  
#               | '_ ` _ \ / _` | | '_ \ 
#               | | | | | | (_| | | | | |
#               |_| |_| |_|\__,_|_|_| |_|
#                                        
# ----------------------------------------------------------

# If command that refer to a site are called as root
# the site is always the parameter right after the command
# name

commands = [
#  command   only_root  needs_site must_exist confirm args, function, description, confirm_text
  ( "help",      False, 0, 0, False, "",        main_help,
    "Show general help",
    ""),

  ( "setup",     True,  0, 0, True, "",        main_setup,
    "Prepare operating system for OMD (installs packages)",
    
    "This operating system installs the following packages:\n"
    " -> FIXME"),

  ( "uninstall", True,  0, 0, True, "",        main_uninstall,
    "Remove OMD and all sites!",

    "BE WARNED: You are about to remove everything your system\n"
    "           have ever known about omd."),

  ( "version",   False, 0, 0, False, "",        main_version,
    "Show version of OMD",
    ""),

  ( "versions",  False, 0, 0, False, "",        main_versions,
    "List installed OMD versions",
    ""),

  ( "sites",     False, 0, 0, False, "", main_sites,
    "Show list of sites",
    ""),

  ( "create",    True,  1, 0, False, "",        main_create,
    "Create a new site",

    "This action performs the following actions on your system:\n"
    "- The user XY is being created\n"
    "- FIXME..."),

  ( "rm",        True,  1, 1, True, "",        main_rm,
    "Remove a site (and its data)",

    "PLEASE NOTE: This action removes all configuration files\n"
    "             and variable data of site XY\n"),

  ( "mv",        True,  1, 1, False, "NEWNAME", main_mv,
    "Rename a site",

    "The site XY will be renamed to Z."),

  ( "cp",        True,  1, 1, False, "NEWNAME", main_cp,
    "Make a copy of a site",

    "The whole site Xy will be copied to Z. A new system user Z will be created.\n"),

  ( "update",    False, 1, 1, False, "[VERSION]", main_update,
    "Update site to other version",
    ""),

  ( "start",     False, 2, 1, False, "", lambda args: main_init_action("start", args),
    "Start services of one or all sites",
    ""),

  ( "stop",      False, 2, 1, False, "", lambda args: main_init_action("stop", args),
    "Stop services of site(s)",
    ""),

  ( "restart",   False, 2, 1, False, "", lambda args: main_init_action("restart", args),
    "Restart services of site(s)",
    ""),

  ( "reload",    False, 2, 1, False, "", lambda args: main_init_action("reload", args),
    "Reload services of site(s)",
    ""),

  ( "status",    False, 2, 1, False, "", lambda args: main_init_action("status", args),
    "Show status of services of site(s)",
    ""),

  ( "config",    False, 1, 1, False, "...", main_config,
    "Show and set site configuration parameters",
    ""),

]

if len(sys.argv) < 2:
    main_help()
    sys.exit(1)

command = sys.argv[1]
args = sys.argv[2:]
found = False
for c, only_root, needs_site, site_must_exist, confirm, argumentlist, command_function, description, confirm_text in commands:
    if c == command:
        found = True
	break

if not found:
    bail_out("omd: no such command: %s\n" % command)

if os.getuid() != 0 and only_root:
    bail_out("omd: root permissions are needed for this command.\n")

# Some commands need a site to be specified. If we are
# called as root, this must be done explicitely. If we
# are site user, the site name is our user name
g_sitename = None
if needs_site > 0:
    if os.getuid() == 0:
	if len(args) >= 1:
	    g_sitename = args[0]
	    args = args[1:]
        elif needs_site == 1:
	    bail_out("omd: please specify site.\n")
    else:
        g_sitename = pwd.getpwuid(os.getuid()).pw_name

if g_sitename != None and site_must_exist and not site_exists(g_sitename):
    bail_out("omd: no such site: %s\n" % g_sitename)

# Commands operating on an existing site *must* run omd in
# the same version as the site has!
if g_sitename and site_must_exist:
    v = site_version(g_sitename)
    if OMD_VERSION != v:
        # Rerun with omd of correct version
	os.execv("/omd/versions/%s/bin/omd" % v, sys.argv)
	bail_out("Cannot run bin/omd of version %s.\n" % v)

if g_sitename:
    g_sitedir = site_dir(g_sitename)
else:
    g_sitedir = None

read_info()

# Commands which affect a site and can be called as root *or* as 
# site user should always run with site user priviledges. That way 
# we are sure that new files and processes are created under the 
# site user and never as root.
if g_sitename and os.getuid() == 0 and not only_root:
    switch_to_site_user()

if confirm:
    sys.stdout.write("%s (yes/NO): " % confirm_text)
    sys.stdout.flush()
    a = sys.stdin.readline().strip()
    if a.lower() != "yes":
	sys.exit(0)

command_function(args)

#!/usr/bin/python

# This program is used to manage instances (create, rm, cp, mv, update)
# There is almost no error handling implemented. Please remember: this
# is a prototype, an experiment - nothing more.

import sys, os, shutil, pwd

# FIXME: Determine this somehow
OMD_VERSION = 0.42

def bail_out(message):
    sys.stderr.write(message)
    sys.exit(1)

def site_dir(sitename):
    return "/omd/sites/" + sitename

def site_exists(sitename):
    return os.path.exists(site_dir(sitename))

def useradd(sitename):
    # Create user for running site 'name'
    os.system("groupadd " + sitename)
    os.system("useradd -d '%s' -c 'OMD instance %s' -g %s %s -s /bin/bash" % \
                (site_dir(sitename), sitename, sitename, sitename))

    # Add Apache to new group. It needs to be able to write in to the 
    # command pipe and possible other stuff
    # FIXME: www-data is distro-specific
    os.system("gpasswd -a www-data %s >/dev/null" % sitename)

def userdel(name):
    os.system("userdel " + name)
    # FIXME: On some OSes (Debian) the group is automatically removed if
    # it bears the same name as the user
    os.system("groupdel " + name + " 2>/dev/null")

def create_site(sitename):
    if site_exists(sitename):
        bail_out("Site '%s' already existing.\n" % sitename)

    # Create operating system user for site
    useradd(sitename)

    sitedir = site_dir(sitename)
    os.makedirs(sitedir)
    os.system("chown %s:%s '%s'" % (sitename, sitename, sitedir))

    # Create symbolic link to version
    os.symlink("../../versions/%s" % OMD_VERSION, sitedir + "/version")

    # Build up directory structure with symbolic links relative to
    # the version link we just create
    for d in [ 'bin', 'include', 'lib', 'share' ]:
        os.symlink("version/" + d, sitedir + "/" + d)

    # Instanciate template files
    replacements = {
        "@SITE@" : sitename,
        "@ROOT@" : sitedir,
    }
    skelroot = "/omd/versions/%s/skel" % OMD_VERSION
    os.chdir(skelroot)  # make relative paths
    for dirpath, dirnames, filenames in os.walk("."): 
        targetdir = sitedir + "/" + dirpath
        if not os.path.exists(targetdir):
            os.mkdir(targetdir)
        for d in dirnames:
            td = targetdir + "/" + d
            # Create directories with same mode as in skel
            if not os.path.exists(td):
                os.mkdir(td)
                mode = os.stat(dirpath + "/" + d).st_mode & 0xfff
                os.chmod(td, mode)
                
        for fn in filenames:
            src = dirpath + "/" + fn
            dst = targetdir + "/" + fn
            if os.path.islink(src):
                os.symlink(os.readlink(src), dst)
            else:
                create_template_instance(src, dst, replacements, sitename)

    # Change ownership of all files and dirs to site user
    os.system("chown -R %s:%s '%s'" % (sitename, sitename, sitedir))

    # Create include-hook for Apache and reload apache
    create_apache_hook(sitename)
    reload_apache()

def create_apache_hook(sitename):
    file("/omd/apache/%s.conf" % sitename, "w").write("Include %s/etc/apache/*.conf\n" % site_dir(sitename))

def delete_apache_hook(sitename):
    os.remove("/omd/apache/%s.conf" % sitename)

def reload_apache():
    # FIXME: This is OS specific
    os.system("apache2ctl restart")

def create_template_instance(src, dst, replacements, sitename):
    file(dst, "w").write(replace_tags(file(src).read(), replacements))
    mode = os.stat(src).st_mode & 0xfff
    os.chmod(dst, mode)

def replace_tags(content, replacements):
    for var, value in replacements.items():
        content = content.replace(var, value)
    return content


def remove_site(sitename):
    userdel(sitename)
    if not site_exists(sitename):
        bail_out("No such site '%s'.\n" % sitename)
    shutil.rmtree(site_dir(sitename))

    # remove include-hook for Apache and tell apache
    delete_apache_hook(sitename)
    reload_apache()


def rename_site(old, new):
    if site_exists(new):
        bail_out("Site %s already existing.\n" % new)
    if not site_exists(old):
        bail_out("No such site '%s'.\n" % sitename)

    # Rename base directory and apache config
    os.rename(site_dir(old), site_dir(new))
    delete_apache_hook(old)
    create_apache_hook(new)

    # Now reflect name change in configuration files which have been
    # create from skeletons. We are only interested in plain files,
    # directories and symlinks won't change.
    patch_skeleton_files(old, new)

    # Create new user and own over all files to him. Then delete old user
    useradd(new)
    chown_tree(site_dir(new), new)
    userdel(old)

    # Tell Apache about changes
    reload_apache()

# Change site specific information in files originally create from
# skeleton files
def patch_skeleton_files(old, new):
    skelroot = "/omd/versions/%s/skel" % OMD_VERSION
    os.chdir(skelroot)  # make relative paths
    for dirpath, dirnames, filenames in os.walk("."): 
        targetdir = site_dir(new) + "/" + dirpath
        for fn in filenames:
            src = dirpath + "/" + fn
            dst = targetdir + "/" + fn
            if os.path.isfile(src) and not os.path.islink(src): # links are also files??.
                patch_template_file(src, dst, old, new)

def copy_site(old, new):
    # Create an exact clone of a site.
    if site_exists(new):
        bail_out("Site %s already existing.\n" % new)
    if not site_exists(old):
        bail_out("No such site '%s'.\n" % sitename)
    
    # First make exact file-per-file copy with same
    # user but already new name
    os.mkdir(site_dir(new))
    os.system("tar cf - -C '%s' . | tar xf - -C '%s'" % \
            (site_dir(old), site_dir(new)))

    # Change config files from old to new site (see rename_site())
    patch_skeleton_files(old, new)

    # Create new user and own over all files to him.
    useradd(new)
    chown_tree(site_dir(new), new)

    # Apache hook, reload apache
    create_apache_hook(new)
    reload_apache()

def chown_tree(dir, user):
    uid = pwd.getpwnam(user).pw_gid
    gid = pwd.getpwnam(user).pw_gid
    os.chown(dir, uid, gid)
    for dirpath, dirnames, filenames in os.walk(dir): 
        for entry in dirnames + filenames:
            os.lchown(dirpath + "/" + entry, uid, gid)


def patch_template_file(src, dst, old, new):
    # Create patch from old instanciated skeleton file to new one
    content = file(src).read()
    for site in [ old, new ]:
        replacements = {
            "@SITE@" : site,
            "@ROOT@" : site_dir(site),
        }
        file("%s.skel.%s" % (dst, site), "w").write(replace_tags(content, replacements))

    # Now create patch from old to new and immediately apply on 
    # existing - possibly user modified - file.
    if 0 == os.system("diff -u %s.skel.%s %s.skel.%s | patch --force --backup --forward --silent %s" % 
            (dst, old, dst, new, dst)):
        # remove unnecessary files
        try:
            os.remove(dst + ".skel." + old)
            os.remove(dst + ".skel." + new)
            os.remove(dst + ".orig")
        except:
            pass
    else:
        sys.stdout.write("%s: Cannot update due to your changes. Please check.\n" % dst)


def call_init_scripts(command, sitename):
    rc_dir = "/omd/sites/%s/etc/rc.d" % sitename
    scripts = os.listdir(rc_dir)
    scripts.sort()
    # Call stop scripts in reverse order
    if command == "stop":
        scripts.reverse()
    for script in scripts:
        os.system("%s/%s %s" % (rc_dir, script, command))

command = sys.argv[1]
if command == "create":
    create_site(sys.argv[2]) # should be name argument
elif command == "rm":
    remove_site(sys.argv[2])
elif command == "mv":
    rename_site(sys.argv[2], sys.argv[3])
elif command == "cp":
    copy_site(sys.argv[2], sys.argv[3])
elif command in [ "start", "stop", "restart", "reload", "status" ]:
    # if site name if not given, the site is included in our
    # executable path
    if len(sys.argv) > 2:
        sitename = sys.argv[2]
    else:
        sitename = os.path.abspath(sys.argv[0]).split('/')[3]
    call_init_scripts(command, sitename)
else:
    bail_out("Sorry. Currently only 'create' and 'rm' are implemented.\n")

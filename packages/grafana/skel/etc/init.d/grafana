#!/usr/bin/env bash

# description: Grafana web server & backend

# Check if grafana is enabled in OMD. If not terminate.
. etc/omd/site.conf
if [ "$CONFIG_GRAFANA" != "on" ] ; then
    exit 5
fi

NAME="Grafana"
GRAFANA_HOME=$OMD_ROOT/share/grafana
CONF_DIR=$OMD_ROOT/etc/grafana
WORK_DIR=$GRAFANA_HOME
DATA_DIR=$OMD_ROOT/var/grafana
LOG_DIR=$OMD_ROOT/var/log/grafana
CONF_FILE=$CONF_DIR/grafana.ini
PID_FILE=$OMD_ROOT/tmp/run/$NAME.pid
LOGFILE=$LOG_DIR/grafana.log
DAEMON=$OMD_ROOT/bin/grafana

OPTIONS="--homepath=${GRAFANA_HOME} --pidfile=${PID_FILE} --config=${CONF_FILE} cfg:default.paths.data=${DATA_DIR} cfg:default.paths.logs=${LOG_DIR}"
APIURL="http://omdadmin:omd@localhost:$CONFIG_GRAFANA_TCP_PORT/api"

get_status() {
    pid=$( cat $PID_FILE 2>/dev/null )
    if [ -n "$pid" ]; then
        if ps -p $pid > /dev/null 2>&1 ; then
            echo "$NAME is running with pid $pid"
            return 0;
        fi
    fi
    echo "$NAME is not running"
    return 1;
}

stop_grafana() {
    pid=$( cat $PID_FILE 2>/dev/null )
    if [ -z "$pid" ]; then
        echo ". Not running."
    else
        ps -p $pid > /dev/null 2>&1 && kill $pid
        for x in $(seq 15); do
            printf "."
            ps -p $pid > /dev/null 2>&1 || break
            sleep 0.2;
        done
        if ! ps -p $pid > /dev/null 2>&1 ; then
            echo "OK"
            exit 0;
        else
            echo "failed"
            exit 1;
        fi
    fi
}

case "$1" in
  start)
        test -f $OMD_ROOT/var/grafana/data/grafana.db
        FIRST_START=$?
        test -f $OMD_ROOT/influxportupdated
        PORT_UPDATED=$?
        printf '%s' "Starting $NAME..."

        if get_status > /dev/null ; then
            echo "failed"
            echo "$NAME already running"
            exit 0;
        fi

        mkdir -p "$LOG_DIR" "$DATA_DIR"
        touch "$PID_FILE"
        nohup $DAEMON $OPTIONS >>$LOGFILE 2>&1 &
        if [ $? -eq 0 ]; then
            echo "OK"
            if [ $FIRST_START -eq 1 ]; then
                echo "first start, trying to create datasource"
                for x in $(seq 120); do
                    curl "$APIURL/datasources" \
                            --silent \
			    -H 'X-WEBAUTH-USER: omdadmin'
                    [ $? == 0 ] && break;
                    printf "."
                    sleep 0.5;
                done
                curl "$APIURL/datasources" \
                        --silent \
                        --show-error \
                        -X POST \
			-H 'X-WEBAUTH-USER: omdadmin' \
                        -H 'Content-Type: application/json;charset=UTF-8' \
                        --data-binary '{"name":"nagflux","type":"influxdb","url":"http://127.0.0.1:'$CONFIG_INFLUXDB_HTTP_TCP_PORT'","access":"proxy","isDefault":true,"database":"nagflux", "user": "root", "password":"root"}' \
                        2>&1
                echo ""
            fi
            if [ $PORT_UPDATED -eq 0 ]; then
                echo "influxdb port has changed, trying to update datasource"
                for x in $(seq 60); do
                    curl "$APIURL/datasources" \
                            --silent \
			    -H 'X-WEBAUTH-USER: omdadmin'
                    [ $? == 0 ] && break;
                    printf "."
                    sleep 0.5;
                done
                # use first data source
                curl "$APIURL/datasources/1" \
                        --silent \
                        --show-error \
                        -X PUT \
			-H 'X-WEBAUTH-USER: omdadmin' \
                        -H 'Content-Type: application/json;charset=UTF-8' \
                        --data-binary '{"name":"nagflux","type":"influxdb","url":"http://127.0.0.1:'$CONFIG_INFLUXDB_HTTP_TCP_PORT'","access":"proxy","isDefault":true,"database":"nagflux", "user": "root", "password":"root"}' \
                        2>&1
                echo ""
                rm -f $OMD_ROOT/influxportupdated
            fi
            exit 0;
        else
            echo "failed"
            exit 1;
        fi
    ;;
  stop)
        printf '%s' "Stopping $NAME..."
        pid=$( cat $PID_FILE 2>/dev/null )
        if [ -z "$pid" ]; then
            echo ". Not running."
        else
            stop_grafana;
        fi
    ;;
  status)
        get_status;
        exit $?;
    ;;
    reload|restart)
        $0 stop && sleep 1 && $0 start
        exit $?
    ;;
  *)
        echo "Usage: $NAME {start|stop|kill|status|restart}"
        exit 1
    ;;
esac

exit 0

#!/bin/bash

# Check if MySQL is enabled in OMD. If not terminate.
. ###ROOT###/etc/omd/site.conf
if [ "$CONFIG_MYSQL" != on ] ; then
    exit 5
fi

## Fetch a particular option from mysql's invocation.
#
# Usage: void mysqld_get_param option
mysqld_get_param() {
  /usr/sbin/mysqld --print-defaults \
    | tr " " "\n" \
    | grep -- "--$1" \
    | tail -n 1 \
    | cut -d= -f2
}

## Checks if there is a server running and if so if it is accessible.
#
# check_alive insists on a pingable server
# check_dead also fails if there is a lost mysqld in the process list
#
# Usage: boolean mysqld_status [check_alive|check_dead] [warn|nowarn]
mysqld_status () {
    ping_output=`mysqladmin ping 2>&1`; ping_alive=$(( ! $? ))

    ps_alive=0
    pidfile=`mysqld_get_param pid-file`
    if [ -f "$pidfile" ] && ps `cat $pidfile` >/dev/null 2>&1; then ps_alive=1; fi

    if [ "$1" = "check_alive"  -a  $ping_alive = 1 ] ||
       [ "$1" = "check_dead"   -a  $ping_alive = 0  -a  $ps_alive = 0 ]; then
        return 0
    else
        if [ "$2" = "warn" ]; then
            echo -e "$ps_alive processes alive and 'mysqladmin ping' resulted in\n$ping_output\n"
        fi
        return 1
    fi
}

mysql_wait_start() {
    if mysqld_status check_alive nowarn; then
        echo -n "already running. "
        return 1
    else
        mysqld_safe >/dev/null 2>&1 &
        while pidof_apache >/dev/null 2>&1;  do
            if [ $i = '10' ]; then
                return 1
            else
                echo -n "."
                i=$(($i+1))
                sleep 1
           fi
        done
        return 0
    fi
}

mysql_wait_stop() {
    if mysqld_status check_dead nowarn; then
       echo -n 'Not running. '
       return 0
    fi
  
    mysqladmin shutdown

    # wait until really stopped
    i=0
    while ! mysqld_status check_dead nowarn;  do
        if [ $i = '10' ]; then
            return 1
        else
            echo -n "."
            i=$(($i+1))
            sleep 1
       fi
    done
    
    return 0
}

case $1 in 
    start)
        echo -n "Starting MySQL... "
        if mysql_wait_start; then
            echo 'OK.'
            exit 0
        else
            echo 'ERROR.'
            exit 1
        fi
    ;;
    stop)
        echo -n "Stopping MySQL Daemon... "
        if mysql_wait_stop; then
            echo 'OK.'
            exit 0
        else
            echo 'ERROR.'
            exit 1
        fi
    ;;
    restart)
        $0 stop
        $0 start
    ;;
    reload)
        mysqladmin reload
    ;;
    status)
        if mysqld_status check_alive nowarn; then
            echo "$(mysqladmin version)"
        else
            echo "MySQL is stopped."
            exit 3
        fi
    ;;
    *)
        echo "Usage: $0 {start|stop|restart|reload|status}"
    ;;
esac

OpenSource Monitoring Distribution - PROTOTYP
================================================================

Diese Text beschreibt, wie der Prototyp der OMD aufgebaut 
ist. Wie man kompiliert, installiert und instanzen verwaltet.
Wichtig: aktuell ist das ganze nur auf Debian 5.0 lauffähig.

1) Begriffe

Version: Eine Version der OMD ist ein Verzeichnis mit
installierter Software (Nagios plus Addons) in bestimmten
aufeinander abgestimmten Versionen. Dateien einer Version
werden bei der Installation angelegt und nicht mehr verändert.

Site (Instanz): Eine Site ist eine Instanz eines Monitoring-Systems
(z.B. von Nagios). Zu einer Instanz gehört ein Monitoring-System,
evtl. weitere Prozesse (NPCD, rrdcached).


2) Quellcodes

Die Quellcodes (git/omd) sind wie folgt aufgebaut:

Makefile --> Hauptmakefile mit targets 'build' und 'pack'

packages/ --> Unterverzeichnisse mit Paketen

Unter packages hat jedes Addon und auch Nagios selbst ein
Verzeichnis. Dieses enthält einen Tarball des Originalquellcodes,
ein Makefile und evtl. Patches.

Was kann man mit dem ausgepackten Quellcode machen?

'make' packt von allen Paketen die Quellcodes aus und übersetzt
sie. Dabei müssen natürlich die Entwicklerwerkzeuge installiert
sein.

'make pack' ruft anschließend in allen Paketen 'make install'
in das Verzeichnis 'destdir' auf und packt schließlich alles
in einen Tarball ein.


3) Installation

Die Installation auf dem Zielsystem ist einfach: man packt
den Tarball einfach unterhalb der Wurzel aus. Aktuell braucht
man noch folgende manuelle Nacharbeiten:

 * Startskript /etc/init.d/omd aktivieren
 * magic Quotes in PHP ausschalten (für Kohana)

Durch das Auspacken ist entstanden:

/omd/versions/0.42/
/usr/bin/omd
/etc/apache2/conf.d/omd.conf
/etc/init.d/omd


4) Sites erzeugen

Jetzt kann man eine erste Site erzeugen. Man denkt sich dafür einen
hübschen Namen aus, z.B. 'muc'. Wichtig: da ein Linux-Benutzer dieses
Namens nebst einer Gruppe angelegt wird, darf es keinen Benutzer oder
Gruppe dieses Namens geben. Die Site ist schnell angelegt. Alles
geht mit dem Befehl 'omd', der als root ausgeführt wird:

# omd create muc

Jetzt ist ein Verzeichnis /omd/sites/muc entstanden, welches dem
neuen Benutzer 'muc' gehört. Die Instanz wird gestartet (Nagios,
NPCD) mit:

# omd start muc

Fertig. Jetzt kann man über den Browser Nagios und Multisite erreichen:

http://hostname/muc/nagios/
http://hostname/muc/check_mk/

Einloggen mit 'omdadmin' Passwort 'omd'

Umfang: Nagios 3.2.1, Check_MK 1.1.6b3 inkl. Livestatus und Multisite,
PNP4Nagios 0.6.3 mit NPCD und bulk mode. rrdtool 1.4.2 (noch ohne cache).

Die Site wird verwaltet über /omd/sites/muc. Dies ist auch das
Homeverzeichnis des Benuters 'muc'. Am besten macht man ein 
su - muc. Unter /omd/sites/muc gibt es:

version -> symlink auf /omd/versions/0.42
bin, lib, share -> links auf version/{bin,lib,share}
var -> Datenverzeichnis der Site
etc -> Benutzereinstellungen
tmp -> Flüchtige Daten (checkresults, perfdata-spool, etc)

Wenn man 'muc' ist kann man die Instanz ebenfalls starten
und stoppen mit 

$ omd start

und

$ omd stop

Hier wird der gleiche omd-Befehl aufgerufen, aber ohne Angabe
der Instanz, weil diese ja durch den Benutzer vorgegeben ist.

5) Instanzen verwalten

Jetzt wieder als root kann man:

Eine Instanz komplett löschen (bitte vorher stoppen)

# omd rm muc 

Eine Instanz umbenennen:

# omd mv muc neuername

Eine Instanz kopieren:

# omd cp muc muc2

Schauben, ob eine Instanz läuft:

# omd status muc

Das komplette OMD inklusive aller Instanzen wieder
aufräumen:

# omd uninstall


Ideen für weitere Operatione von omd:

omd archive -> stoppt falls nötig, packt zu tar zusammen (nur daten),
    löscht danach

omd backup -> stoppt und tart (wie archive, nur ohne löschen)

omd restore -> packt backup wieder aus.


6) Der Befehl /usr/bin/omd

Da viele der Operationen Versions-spezifisch implementiert sein
müssen, ist /usr/bin/omd nur ein sehr schlanker Wrapper. Dieser
ermittelt die Version der Instanz, um die es geht, und ruft
eine Versionsspezifische Variante des Befehls auf, der die eigentliche
Arbeit macht (/omd/versions/$VERSION/bin/omd)

* Bei 'create' wird die Version verwendet, zu der eine Instanz
  erzeugt werden soll.

* Bei 'update' wird die *neue* Version herangezogen, damit diese
  eine Chance hat, evtl. Konfigurationsdateien zu migrieren. Update
  ist aber noch nicht programmiert...

* Bei allen anderen Befehle wird die Version der Instanz herangezogen,
  mit der operiert wird.

Der Wrapper /usr/bin/omd wird entweder mit jeder neuen Version überschrieben
und auf einen neuen Stand gebracht, oder in einem separaten Paket ausgeliefert.
Am einfachsten wäre es, ihn in den Tarball einfach miteinzubauen. Bei
Distro-Paketen (Debian, RPM) kann man das als Subpaket abspalten, damit
es nicht zu Dateikonflikten kommt. Da /usr/bin/omd aber sehr einfach
gehalten ist (wie auch die anderen Dateien, die nicht unterhalb
von /omd/versions/ liegen) ist die Hoffnung, dass man diese (fast) nie
wieder ändern muss.


